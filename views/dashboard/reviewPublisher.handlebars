</head>

<body class="g-sidenav-show rtl  bg-gray-100">
  <div class="min-height-300 bg-primary position-absolute w-100"></div>
  {{> __dsidenavf}}
  <main class="main-content position-relative border-radius-lg overflow-hidden">
    <!-- Navbar -->
    {{> __dashnavfa}}
    <!-- End Navbar -->
    <div class="container-fluid py-4">

      <div class="row">
        {{#each ReviewPost}}
        <div class="col-md-4 p-2">
          <div class="card card-profile">
            <div class="row justify-content-center"></div>
            <div class="card-header text-center border-0 pt-0 pt-lg-2 pb-4 pb-lg-3">

            </div>
            <div class="card-body pt-0">

              <div class="text-center mt-4">
                <h5>{{this.Name}}</h5>
                <p>{{this.Comment}}</p>
                <div class="row">
                  <div class="col">

                    <a href="https://ipinfo.io/{{this.reviewerIP}}" target="_blank">
                      مشاهده موقعیت مکانی <i class="ni education_hat mr-2"></i>
                    </a>
                  </div>
                </div>
                <!-- Availability Switch -->
                <div class="mt-3">
                  <label class="switch">
                    <input type="checkbox" class="availability-toggle" data-id="{{this.ReviewID}}" {{#if
                      this.Show}}checked{{/if}}>
                    <span class="slider round"></span>
                  </label>
                  <span class="ml-2">نمایش</span>
                </div>
                <!-- Delete Button -->
                <button class="btn btn-danger mt-2 delete-review" data-id="{{this.ReviewID}}">حذف نظر</button>

              </div>
            </div>
          </div>
        </div>
        {{/each}}
      </div>

      <style>
        .switch {
          position: relative;
          display: inline-block;
          width: 34px;
          height: 20px;
        }

        .switch input {
          opacity: 0;
          width: 0;
          height: 0;
        }

        .slider {
          position: absolute;
          cursor: pointer;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background-color: #ccc;
          transition: .4s;
          border-radius: 20px;
        }

        .slider:before {
          position: absolute;
          content: "";
          height: 14px;
          width: 14px;
          left: 3px;
          bottom: 3px;
          background-color: white;
          transition: .4s;
          border-radius: 50%;
        }

        input:checked+.slider {
          background-color: #4CAF50;
        }

        input:checked+.slider:before {
          transform: translateX(14px);
        }
      </style>
      <script>
        document.addEventListener("DOMContentLoaded", function () {
          document.querySelectorAll(".availability-toggle").forEach((toggle) => {
            toggle.addEventListener("change", function () {
              const reviewId = this.getAttribute("data-id");
              const show = this.checked ? 1 : 0;

              if (!reviewId) {
                console.error("Error: Missing data-id attribute on toggle button.");
                Swal.fire({
                  title: 'خطا',
                  text: 'شناسه نظر وجود ندارد. لطفاً تنظیمات دکمه حذف را بررسی کنید.',
                  icon: 'error',
                  confirmButtonText: 'بستن',
                });
                return;
              }

              fetch("/reviews/update-show", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({ reviewId, show }),
              })
                .then(response => {
                  if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                  }
                  return response.json();
                })
                .then(data => {
                  Swal.fire({
                    title: data.success ? 'موفقیت' : 'خطا',
                    text: data.success ? 'وضعیت نمایش با موفقیت به‌روزرسانی شد!' : 'خطایی در به‌روزرسانی وضعیت نمایش رخ داد.',
                    icon: data.success ? 'success' : 'error',
                    confirmButtonText: 'بستن',
                  });
                })
                .catch(error => {
                  console.error("Error:", error);
                  Swal.fire({
                    title: 'خطا',
                    text: 'خطایی در به‌روزرسانی وضعیت نمایش رخ داد. لطفاً جزئیات را در کنسول بررسی کنید.',
                    icon: 'error',
                    confirmButtonText: 'بستن',
                  });
                });
            });
          });

          // Handle delete button click
          document.querySelectorAll(".delete-review").forEach((button) => {
            button.addEventListener("click", function () {
              const reviewId = this.getAttribute("data-id");

              if (!reviewId) {
                console.error("Error: Missing data-id attribute on delete button.");
                Swal.fire({
                  title: 'خطا',
                  text: 'شناسه نظر وجود ندارد. لطفاً تنظیمات دکمه حذف را بررسی کنید.',
                  icon: 'error',
                  confirmButtonText: 'بستن',
                });
                return;
              }

              Swal.fire({
                title: 'آیا مطمئن هستید؟',
                text: "این عملیات قابل بازگشت نیست!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'بله، حذف شود!',
                cancelButtonText: 'لغو',
              }).then((result) => {
                if (result.isConfirmed) {
                  fetch("/reviews/delete", {
                    method: "DELETE",
                    headers: {
                      "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ reviewId }),
                  })
                    .then(response => {
                      if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                      }
                      return response.json();
                    })
                    .then(data => {
                      Swal.fire({
                        title: data.success ? 'حذف شد!' : 'خطا',
                        text: data.success ? 'نظر با موفقیت حذف شد.' : 'خطایی در حذف نظر رخ داد.',
                        icon: data.success ? 'success' : 'error',
                        confirmButtonText: 'بستن',
                      }).then(() => {
                        if (data.success) {
                          location.reload(); // Reload the page to reflect changes
                        }
                      });
                    })
                    .catch(error => {
                      console.error("Error:", error);
                      Swal.fire({
                        title: 'خطا',
                        text: 'خطایی در حذف نظر رخ داد. لطفاً جزئیات را در کنسول بررسی کنید.',
                        icon: 'error',
                        confirmButtonText: 'بستن',
                      });
                    });
                }
              });
            });
          });
        });
      </script>



      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
      <script>
        const listings = {{{ json listings }}};
        document.addEventListener('DOMContentLoaded', function () {
          console.log('Listings:', listings);
          document.querySelectorAll('.listing-detail').forEach(button => {
            button.addEventListener('click', function () {
              const listingId = this.getAttribute('data-id');
              console.log('Clicked Listing ID:', listingId);

              const listingData = listings.find(item => String(item.listingId) === String(listingId));
              if (listingData) {
                console.log('Found Listing Data:', listingData);

                let tableHTML = '<table class="table table-bordered">';
                tableHTML += '<thead><tr><th>Field</th><th>Value</th></tr></thead><tbody>';
                for (const [key, value] of Object.entries(listingData)) {
                  tableHTML += `<tr><td>${key}</td><td>${value}</td></tr>`;
                }
                tableHTML += '</tbody></table>';

                Swal.fire({
                  title: 'جزئیات لیست',
                  html: tableHTML,
                  icon: 'info',
                  confirmButtonText: 'بستن',
                  width: '80%',
                });
              } else {
                Swal.fire({
                  title: 'خطا',
                  text: `داده‌های لیست برای شناسه: ${listingId} یافت نشد`,
                  icon: 'error',
                  confirmButtonText: 'بستن',
                });
              }
            });
          });
        });
      </script>
</body>
</head>